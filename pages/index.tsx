import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { TextArea } from "../components/TextArea/TextArea";
import { useState } from "react";
import { Revisions } from "../components/Revisions/Revision";
export default function Home() {
  const [revisions, setRevisions] = useState([]);
  const RevisionsArray = revisions.map((element) => (
    <Revisions text={element} />
  ));
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <section style={{ display: "flex" }}>
          <div
            id="side-bar"
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              width: "15rem",
              border: "1px solid white",
              marginRight: "1rem",
              gap: "1rem",
            }}
          >
            {RevisionsArray}
          </div>
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <TextArea
              size={["27rem", "27rem"]}
              name="input"
              placeholder={"Put your text in here"}
              title={"Enter your PIQ a single paragraph from your PIQ:"}
              character_count_max={100}
            />
            <div style={{ display: "flex", gap: "1rem" }}>
              <button id="feedback_button" onClick={get_feedback}>
                Get feedback
              </button>
              <button
                id="revision_button"
                onClick={() => revise(setRevisions, revisions)}
              >
                Revise
              </button>
            </div>
            <h1>Feedback</h1>
            <p id="feedback" style={{ width: "27rem" }}></p>
          </div>
        </section>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

async function get_feedback() {
  const piq_question_element = document.getElementById(
    "question"
  ) as HTMLInputElement;
  const writing_element = document.getElementById(
    `textarea_output`
  ) as HTMLTextAreaElement;
  const feedback = document.getElementById("feedback");
  if (!(piq_question_element && writing_element && feedback)) return;

  const piq_question = piq_question_element.value;
  const writing = writing_element.value;

  const { data } = await fetch("api/feedback", {
    method: "POST",
    mode: "cors",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ piq: piq_question, writing: writing }),
  }).then((req) => req.json());
  feedback.textContent = data.replace("\n", "");
}

async function revise(setRevisions: Function, revisions: [string] | never[]) {
  const revision = document.getElementById("is_revised");
  const feedback = document.getElementById("feedback")?.textContent;
  const writing_element = document.getElementById(
    `textarea_output`
  ) as HTMLTextAreaElement;

  if (writing_element === undefined) return;
  const writing = writing_element.value;

  const newArray = [...revisions, writing];
  setRevisions(newArray);
  writing_element.style.display = "none";
  if (revision) revision.innerText = "Revising";
  const { data } = await fetch("api/revise", {
    method: "POST",
    mode: "cors",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ feedback: feedback, writing: writing }),
  }).then((req) => req.json());
  if (writing_element && writing_element?.value)
    writing_element.value = data.replace("\n", "").replace("\n", "");
  writing_element.style.display = "";
  if (revision) {
    revision.innerText = "Revised";
    revision.style.display = "";
  }
}
